rating <- as.numeric(temp[i]) + rating
print(temp[i])
print(rating)
print(counter)
}
}
oppcalc(oppsub,1)
as.numeric(oppsub[1])
as.numeric(oppsub[1][1])
oppsub[1][1]
oppsub[[1]][1]
as.numeric(oppsub[[1]][1])
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
for (i in temp){
counter <- counter + 1
#rating <- as.numeric(temp[i]) + rating
print(temp[i])
print(rating)
print(counter)
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
for (i in temp){
counter <- counter + 1
#rating <- as.numeric(temp[i]) + rating
print(i)
print(rating)
print(counter)
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
for (i in temp){
counter <- counter + 1
rating <- as.numeric(i) + rating
print(i)
print(rating)
print(counter)
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (i in temp){
counter <- counter + 1
rating <- as.numeric(i) + rating
print(i)
print(rating)
print(counter)
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (i in temp){
counter <- counter + 1
rating <- as.numeric(i) + rating
print(rating)
print(counter)
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (i in temp){
counter <- counter + 1
rating <- rating + as.numeric(i)
print(rating)
print(counter)
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + as.numeric(i)
print(rating)
print(counter)
}
}
}
oppcalc(oppsub,1)
chess$PreRating[1,]
chess$PreRating[1]
chess$PreRating[2]
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[i]
print(rating)
print(counter)
}
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
print(rating)
print(counter)
}
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- rating / counter
print(rating)
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
print(rating)
}
}
oppcalc(oppsub,1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
print(rating)
}
}
oppcalc(oppsub,2)
oppcalc(oppsub,1)
1436 +1563 + 1600 + 1610 + 1649 + 1663 + 1716
11237/7
?lapplly
?lapply
t <- lapply(oppsub, oppcalc, pos=1:length(oppsub))
t
t <- lapply(oppsub, oppcalc, pos=(1:64)
)
t <- lapply(oppsub, oppcalc, pos=(1)
)
t <- lapply(oppsub, oppcalc, pos=1)
oppcalc(oppsub, 1)
oppcalc(oppsub, 2)
oppcalc(oppsub, 3)
oppcalc(oppsub, 4)
oppcalc(oppsub, 1:64)
oppcalc(oppsub, 1:2)
oppcalc(oppsub, 1)
oppcalc(oppsub, 2)
oppcalc(oppsub, 3)
chess$AvgOppPreRating <- oppcalc(oppsub)
View(chess)
chess$AvgOppPreRating <- oppcalc(oppsub)
View(chess)
chess$AvgOppPreRating <- apply(oppcalc, 1)
chess$AvgOppPreRating <- apply(oppsubs, 1, oppcaclc)
chess$AvgOppPreRating <- apply(oppsubs, 1, oppcalc)
chess$AvgOppPreRating <- apply(oppsub, 1, oppcalc)
chess$AvgOppPreRating <- oppcalc(oppsub, 1:64)
View(chess)
str(chess)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(temp)
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
print(rating)
return(rating)
}
}
#chess$AvgOppPreRating <- lap
chess$AvgOppPreRating <- oppcalc(oppsub, 1:64)
View(chess)
oppcalc(oppsub, 1)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list) {
for (pos in list) {
temp <- list[pos]
rating <- 0
counter <- 0
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
print(rating)
return(rating)
}
}
}
#chess$AvgOppPreRating <- lap
oppcalc(oppsub)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list) {
for (pos in list) {
temp <- list[pos]
rating <- 0
counter <- 0
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
#print(rating)
return(rating)
}
}
}
#chess$AvgOppPreRating <- lap
oppcalc(oppsub)
t <- oppcalc(oppsub)
t
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list) {
for (pos in list) {
temp <- list[pos]
rating <- 0
counter <- 0
print(list[pos])
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
#print(rating)
return(rating)
}
}
}
#chess$AvgOppPreRating <- lap
oppcalc(oppsub)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(list[pos])
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
#print(rating)
return(rating)
}
}
#chess$AvgOppPreRating <- lap
oppcalc(oppsub, 1)
oppcalc(oppsub, 2)
oppcalc(oppsub, 3)
oppcalc(oppsub, 4)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(list[pos])
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
#print(rating)
return(rating)
}
}
chess$num <- 1:64
#chess$AvgOppPreRating <- lap
View(chess)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
print(list[pos])
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
#print(rating)
return(rating)
}
}
chess$num <- 1:64
#chess$AvgOppPreRating <- lap
oppcalc(oppsub, 4)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
rating <- 0
counter <- 0
#print(list[pos])
for (place in temp){
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
#print(rating)
return(rating)
}
}
chess$num <- 1:64
#chess$AvgOppPreRating <- lap
oppcalc(oppsub, 4)
lapply(oppsub, oppcalc, pos=chess$num)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
#print(list[pos])
for (place in temp){
rating <- 0
counter <- 0
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
#print(rating)
return(rating)
}
}
chess$num <- 1:64
#chess$AvgOppPreRating <- lap
lapply(oppsub, oppcalc, pos=chess$num)
chess$AvgOppPreRating <- lapply(oppsub, oppcalc, pos=chess$num)
View(chess)
chess$AvgOppPreRating <- sapply(oppsub, oppcalc, pos=chess$num)
View(chess)
chess$AvgOppPreRating <- tapply(oppsub, oppcalc, pos=chess$num)
chess$AvgOppPreRating <- lapply(oppsub, oppcalc, pos=chess$num)
View(chess)
oppcalc(oppsub, 1)
chess$AvgOppPreRating <- lapply(oppsub, oppcalc, pos=1:64)
chess$AvgOppPreRating <- lapply(oppsub, oppcalc, pos=1)
View(chess)
oppsub <- substr(group1, b3+1, b4)
oppsub <- str_extract_all(oppsub, '\\b\\d{1,}')
#oppsub <- as.matrix(oppsub)
# let's build a function that calcs the opponent pre-rating using the oppsub list
oppcalc <- function(list, pos) {
temp <- list[pos]
#print(list[pos])
for (place in temp){
rating <- 0
counter <- 0
for(i in place) {
counter <- counter + 1
rating <- rating + chess$PreRating[as.numeric(i)]
}
rating <- round(rating / counter, 2)
#print(rating)
return(rating)
}
}
chess$num <- 1:64
#chess$AvgOppPreRating <- lap
oppcalc(oppsub, 1)
oppcalc(oppsub, chess$num)
?ave
with(oppsub, oppcalc(oppsub, chess$num))
with(chess, oppcalc(oppsub, chess$num))
?with
apply(oppsub, oppcalc)
apply(oppsub, 1, oppcalc)
?lapply
lapply(oppsub, oppcalc, pos=1:64)
lapply(oppsub, oppcalc, pos=c(1:64))
